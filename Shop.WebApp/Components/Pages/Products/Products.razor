@page "/products"
@using Shop.Models.Dtos
@using Shop.WebApp.Services.Contracts
@inject IProductService ProductService
@inject NavigationManager NavigationManager

@if (ProductList == null)
{
    <h3>Loading products...</h3>
}
else
{
    <h3 class="mb-5">Products</h3>

    var productCount = ProductList.Count();

    if (productCount > 0)
    {
        <div class="row mt-3">
            @foreach (var productGroup in GetGroupedProductsByCategory())
            {
                <h4>@GetCategoryName(productGroup)</h4>
                <div class="row mt-3">
                    <DisplayProducts Products="@productGroup.Take(4)"/>
                </div>
                <hr class="mb-3"/>
            }
        </div>
    }
}

@code {
    public IEnumerable<ProductDto> ProductList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ProductList = await ProductService.GetProducts();
    }

    protected IOrderedEnumerable<IGrouping<int, ProductDto>> GetGroupedProductsByCategory()
    {
        return from product in ProductList
               group product by product.CategoryId
               into productByCategoryGroup
               orderby productByCategoryGroup.Key
               select productByCategoryGroup;
    }

    protected string GetCategoryName(IGrouping<int, ProductDto> groupedProductDtos)
    {
        return groupedProductDtos.FirstOrDefault(pg => pg.CategoryId == groupedProductDtos.Key).CategoryName;
    }
}