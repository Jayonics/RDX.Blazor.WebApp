@page "/products"
@using Shop.WebApp.Services.Contracts
@inject IProductService ProductService
@rendermode InteractiveServer

<div class="container">
    @if (ProductList == null)
    {
        <div class="spinner-border text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        <h2>Products</h2>
        <AuthorizeView Roles="Admin,Staff">
            <!-- surround elements within the AuthorizeView component in a div with danger border -->
            <div class="border border-primary-subtle border-1 rounded p-2 mb-3 bg-primary-subtle">
                <h5>Management actions</h5>
                <div class="btn-group" role="group" aria-label="Product action button group">
                    <a href="/product/add" class="btn btn-success">
                        Add Product
                    </a>
                </div>
            </div>
        </AuthorizeView>

        var productCount = ProductList.Count();

        if (productCount > 0)
        {
            <div class="row mt-3">
                @foreach (var productGroup in GetGroupedProductsByCategory())
                {
                    <h4>@GetCategoryName(productGroup)</h4>
                    <div class="row mt-3">
                        <DisplayProducts Products="@productGroup.Take(4)"/>
                    </div>
                    <hr class="mb-3"/>
                }
            </div>
        }
    }
</div>

@code {
    public IEnumerable<ProductDto> ProductList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ProductList = await ProductService.GetProducts();
    }

    protected IOrderedEnumerable<IGrouping<int, ProductDto>> GetGroupedProductsByCategory() => from product in ProductList
                                                                                               group product by product.CategoryId
                                                                                               into productByCategoryGroup
                                                                                               orderby productByCategoryGroup.Key
                                                                                               select productByCategoryGroup;

    protected string GetCategoryName(IGrouping<int, ProductDto> groupedProductDtos)
    {
        return groupedProductDtos.FirstOrDefault(pg => pg.CategoryId == groupedProductDtos.Key).CategoryName;
    }
}