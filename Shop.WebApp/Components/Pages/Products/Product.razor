@page "/product/{Id}"
@using Shop.Models.Dtos
@using Shop.WebApp.Services.Contracts
@inject IProductService ProductService

@if (product == null)
{
    <p>Loading product details...</p>
}
else
{
    <div class="container-fluid">
        <h5 class="card-title">@product.Name</h5>
        <div id="carouselExampleControls" class="carousel slide" data-ride="carousel">
            <div class="carousel-inner">
                <div class="carousel-item active">
                    <img class="d-block w-100" src="@product.ImageURL" alt="@product.Name"/>
                </div>
            </div>
            <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>
        </div>
        <div class="card-body">
            <p class="card-text">@product.Description</p>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">Price: @product.Price.ToString("C")</li>
            <li class="list-group-item">Quantity: @product.Quantity</li>
            <li class="list-group-item">Category: @product.CategoryName</li>
        </ul>
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }

    public ProductDto product { get; set; }

    protected override async Task OnInitializedAsync()
    {
        product = await ProductService.GetProduct(int.Parse(Id));
    }
}