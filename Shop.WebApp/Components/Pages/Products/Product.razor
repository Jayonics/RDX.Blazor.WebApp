@page "/product/{Id}"
@using Shop.Models.Dtos
@using Shop.WebApp.Services.Contracts
@inject IProductService ProductService

@if (product == null)
{
    <p>Loading product details...</p>
}
else
{
    var productDetails = new Dictionary<string, string>
    {
        { "Price", product.Price.ToString("C") },
        { "Quantity", product.Quantity.ToString() },
        { "Category", product.CategoryName }
    };

    <div class="container-fluid">
        <div class="card m-auto">
            <h4 class="card-header">@product.Name</h4>
            <div class="row">
                <div class="col">
                    <div class="card-body m-md-auto">
                        <img class="card-img img-fluid img-thumbnail" src="@product.ImageURL" alt="@product.Name"/>
                    </div>
                </div>
            </div>
            <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>
        </div>
        <div class="card-body">
            <p class="card-text">@product.Description</p>
                <div class="col">
                    <div class="card-body">
                        <p class="card-text">@product.Description</p>
                        <div class="card">
                            <ul class="list-group">
                                @foreach (var detail in productDetails)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <form>
                                            @if (EditMode == true)
                                            {
                                                <div class="input-group">
                                                    <input type="text" class="form-control" value="@detail.Key"/>
                                                    <input type="text" class="form-control" value="@detail.Value"/>
                                                </div>

                                            }
                                            else
                                            {
                                                <div>@detail.Key</div>
                                                <div>@detail.Value</div>
                                            }
                                        </form >
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                    <div class="card-body">
                        <form>
                            <div class="mb-3">
                                <label for="quantity" class="form-label h5">Quantity</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" id="quantity" min="1" max="@product.Quantity" value="1">
                                    <button type="submit" class="btn btn-primary">Add to Cart</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }

    public ProductDto product { get; set; }

    public bool EditMode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        product = await ProductService.GetProduct(int.Parse(Id));
    }

    public void EditProduct()
    {
        EditMode = true;
        StateHasChanged();
    }
}