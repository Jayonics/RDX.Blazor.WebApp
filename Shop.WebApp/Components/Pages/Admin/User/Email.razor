@page "/UserManagement/{userId}/Email"

<PageTitle>Manage email</PageTitle>

<h3>Manage email</h3>

<StatusMessage Message="@message"/>
@if (user != null)
{
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                @if (isEmailConfirmed)
                {
                    <div class="form-floating mb-3 input-group">
                        <input type="text" value="@email" class="form-control" placeholder="Please enter your email." disabled/>
                        <div class="input-group-append">
                            <span class="h-100 input-group-text text-success font-weight-bold">✓</span>
                        </div>
                        <label for="email" class="form-label">Email</label>
                    </div>
                }
                else
                {
                    <div class="form-floating mb-3">
                        <input type="text" value="@email" class="form-control" placeholder="Please enter your email." disabled/>
                        <label for="email" class="form-label">Email</label>
                        <button type="submit" class="btn btn-link" form="send-verification-form">Send verification email</button>
                    </div>
                }
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Please enter new email."/>
                    <label for="new-email" class="form-label">New email</label>
                    <ValidationMessage For="() => Input.NewEmail" class="text-danger"/>
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Change email</button>
            </EditForm>
        </div>
    </div>
}
else
{
    // Display a loading wheel and status
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}

@code {
    [Parameter]
    public string userId { get; set; }

    private string? message;

    private ApplicationUser user = default!;

    private string? email;

    private bool isEmailConfirmed;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.FindByIdAsync(userId: userId);
        if (user == null)
        {
            message = "Error: User not found";
        }
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
        await base.OnInitializedAsync();
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);

        try
        {
            var result = await UserManager.SetEmailAsync(user, Input.NewEmail);
            if (!result.Succeeded)
            {
                Log.Logger.Error("{ClassName}: {Admin} FAILED to execute {MethodName} on behalf of user {User}", GetType().FullName, AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User?.Identity?.Name, MethodBase.GetCurrentMethod().ReflectedType.Name, user.UserName);
                message = $"Error: {string.Join(",", result.Errors.Select(error => error.Description))}";
            }
            else
            {
                Log.Logger.Information("{ClassName}: {Admin} SUCCESSFULLY executed {MethodName} on behalf of user {User}", GetType().FullName, AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User?.Identity?.Name, MethodBase.GetCurrentMethod().ReflectedType.Name, user.UserName);
                message = "Email changed successfully.";
            }
        } catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }

}