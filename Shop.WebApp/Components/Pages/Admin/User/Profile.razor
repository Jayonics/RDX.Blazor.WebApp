@page "/UserManagement/{userId}/Profile"

@inject ILogger<Profile> Logger

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage Message="@message"/>

@if (user != null)
{
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="form-floating mb-3">
                    <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled/>
                    <label for="username" class="form-label">Username</label>
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number."/>
                    <label for="phone-number" class="form-label">Phone number</label>
                    <ValidationMessage For="() => Input.PhoneNumber" class="text-danger"/>
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}

@code {
    [Parameter]
    public string userId { get; set; }

    private ApplicationUser user = default!;

    private string? message;

    private string? username;

    private string? phoneNumber;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.FindByIdAsync(userId: userId);
        if (user == null)
        {
            message = "Error: User not found";
        }
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;

        await base.OnInitializedAsync();
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                message = $"Error: {string.Join(",", setPhoneResult.Errors.Select(error => error.Description))}";
                Log.Logger.Error("{ClassName}: {Admin} FAILED to execute {MethodName} on behalf of user {User}", GetType().FullName, AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User?.Identity?.Name, MethodBase.GetCurrentMethod().ReflectedType.Name, user.UserName);
                return;
            }
            else
            {
                Log.Logger.Information("{ClassName}: {Admin} SUCCESSFULLY executed {MethodName} on behalf of user {User}", GetType().FullName, AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User?.Identity?.Name, MethodBase.GetCurrentMethod().ReflectedType.Name, user.UserName);
                message = "Your phone number has been updated";
            }
        }


    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }

}