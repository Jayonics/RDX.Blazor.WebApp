@page "/UserManagement/{userId}/Password"

@inject ILogger<Password> Logger

<PageTitle>Change password</PageTitle>

<h3>Change password</h3>
<StatusMessage Message="@message"/>
@if (user != null)
{
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password."/>
                    <label for="new-password" class="form-label">New password</label>
                    <ValidationMessage For="() => Input.NewPassword" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password."/>
                    <label for="confirm-password" class="form-label">Confirm password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
                </div>
                @if (is2faEnabled)
                {
                    <div class="alert alert-warning">
                        <strong>Warning:</strong> This user has 2FA enabled. After changing the password, you may need to
                        <a href="@($"/UserManagement/{userId}/TwoFactorAuthentication")">reset or disable the 2FA methods</a>.
                    </div>
                }
                <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}

@code {
    [Parameter]
    public string userId { get; set; }

    private ApplicationUser user = default!;

    private string? message;

    private bool is2faEnabled;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.FindByIdAsync(userId: userId);
        if (user == null)
        {
            message = "Error: User not found";
        }
        is2faEnabled = await UserManager.GetTwoFactorEnabledAsync(user);

        await base.OnInitializedAsync();
    }

    private async Task OnValidSubmitAsync()
    {
        var resetPasswordToken = await UserManager.GeneratePasswordResetTokenAsync(user);
        var resetPasswordResult = await UserManager.ResetPasswordAsync(user, resetPasswordToken, Input.NewPassword);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;
        // If the client attempting to access the UserManagement is not authenticated, log a warning
        if (claimsPrincipal.Identity != null)
        {
            // If the client is authenticated, log the user's email, page, and action
            Logger.LogInformation("{ClassName}: {Admin} executed {MethodName} on behalf of user {User}", GetType().FullName, claimsPrincipal.Identity.Name, MethodBase.GetCurrentMethod().ReflectedType.Name, user.UserName);

        }
        else
        {
            // If the client is not authenticated, log a warning
            // Logger.LogWarning("An unauthenticated user accessed the User Management page.");
            // Log.Logger.WithClassAndMethodNames<UserManagementLayout>().Warning("An unauthenticated user accessed the User Management page");
            Logger.LogWarning("{ClassName} - {MethodName} an unauthenticated user attempted to access the page but failed", GetType().Name, MethodBase.GetCurrentMethod().ReflectedType.Name ,claimsPrincipal.Identity.Name, user.UserName);
            NavigationManager.NavigateTo("/Identity/Account/Login");
        }

        if (!resetPasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", resetPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        Logger.LogInformation("User changed their password successfully.");
        message = "User changed their password successfully.";
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}