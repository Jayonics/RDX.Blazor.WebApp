@page "/addproduct"
@using Shop.Models.Requests
@using Shop.WebApp.Services
@using Shop.WebApp.Services.Contracts
@rendermode InteractiveServer
@inject IProductService ProductService
@inject IProductCategoryService ProductCategoryService
@inject ILogger<Product> Logger
@inject NavigationManager NavigationManager
@inject IAzureStorageService AzureStorageService


<div class="container-fluid">
    <div class="card m-auto">
        <EditForm Model="product" OnValidSubmit="() => AddNewProduct()" class="form" FormName="product">
            <h4 class="card-header">Header Placeholder</h4>
            <div class="row">
                <div class="col  m-md-auto">
                    <div class="card-body">
                        <div class="custom-file">
                            <InputFile class="file-input" OnChange="OnChange" MaxFileSize="52428800" accept="image/png, image/jpeg, image/gif" id="inputFile"/>
                            <label for="file" class="form-label">Upload Image</label>
                            <ValidationMessage For="@(() => product.ImageURL)" class="text-warning"/>
                            <!-- Display the image -->
                            <img class="card-img img-fluid img-thumbnail" src="@product.ImageURL" alt="Product Image"/>
                        </div>
                        <div class="input-group-append">
                            <button class="btn btn-success" @onclick="UploadToAzureStorage">Upload</button>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="card-body">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        <div class="container">
                            <div class="row mb-auto">
                                <div class="input-group">
                                    <div class="col">
                                        <div class="input-group-text">Name</div>
                                    </div>
                                    <div class="col">
                                        <InputText type="text" class="form-control" @bind-Value="@product.Name"/>
                                        <ValidationMessage For="@(() => product.Name)" class="text-danger"/>
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-auto">
                                <div class="input-group">
                                    <div class="col">
                                        <div class="input-group-text">Description</div>
                                    </div>
                                    <div class="col">
                                        <InputText type="text" class="form-control" @bind-Value="@product.Description"/>
                                        <ValidationMessage For="@(() => product.Description)" class="text-danger"/>
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-auto">
                                <div class="input-group">
                                    <div class="col">
                                        <div class="input-group-text">Price</div>
                                    </div>
                                    <div class="col">
                                        <InputNumber type="decimal" class="form-control" @bind-Value="product.Price"/>
                                        <ValidationMessage For="@(() => product.Price)" class="text-danger"/>
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-auto">
                                <div class="input-group">
                                    <div class="col">
                                        <div class="input-group-text">Quantity</div>
                                    </div>
                                    <div class="col">
                                        <InputNumber type="number" class="form-control" @bind-Value="product.Quantity"/>
                                        <ValidationMessage For="@(() => product.Quantity)" class="text-danger"/>
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-auto">
                                <div class="input-group">
                                    <div class="col">
                                        <div class="input-group-text">Category</div>
                                    </div>
                                    <div class="col">
                                        <InputSelect class="form-control" @bind-Value="product.CategoryId">
                                            @if (productCategories == null)
                                            {
                                                <option>Loading...</option>
                                            }
                                            else
                                            {
                                                @foreach (var category in productCategories)
                                                {
                                                    <option value="@category.Id">@category.Name</option>
                                                }
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-success mt-3">Add Product</button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {

    [SupplyParameterFromForm]
    public NewProductDto product { get; set; }

    [Parameter]
    public IEnumerable<ProductCategoryDto> productCategories { get; set; }

    private string? Message { get; set; }

    public async void AddNewProduct()
    {

        product.CategoryId = (product.CategoryId == 0) ? productCategories.First().Id : product.CategoryId;
        if (string.IsNullOrWhiteSpace(product.ImageURL))
        {
            product.ImageURL = "https://via.placeholder.com/150";
        }

        var result = await ProductService.AddProduct(product);
        if (result != null)
        {
            Message = "Product added successfully";
        }
        else
        {
            Message = "Product add failed";
        }
    }

    IBrowserFile image;

    // Handle the file upload event and stream the file into a buffer
    async Task OnChange(InputFileChangeEventArgs e)
    {
        image = e.File;
    }

    // Upload the image to the Azure Blob Storage
    async Task UploadToAzureStorage()
    {
        if (image != null)
        {
            var result = await AzureStorageService.UploadAsync(image);
            if (result != null && !result.Error)
            {
                product.ImageURL = result.Blob.Uri;
                Logger.LogInformation("Image uploaded successfully");
            }
            else
            {
                Logger.LogError("Failed to upload image");
            }
        }
    }


    public async Task<IEnumerable<ProductCategoryDto>> GetProductCategories()
    {
        return await ProductCategoryService.GetProductCategories();
    }

    protected override async Task OnInitializedAsync()
    {
        product = new NewProductDto();
        productCategories = await GetProductCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        {
            try
            {
                productCategories = await GetProductCategories();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Unable to fetch product details");
                // Redirect to the /products page
                NavigationManager.NavigateTo("/products");
            }
        }
    }
}