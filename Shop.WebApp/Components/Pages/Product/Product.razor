@page "/product/{Id}"
@using Microsoft.AspNetCore.Authorization
@using Shop.WebApp.Services.Contracts
@rendermode InteractiveServer
@inject IProductService ProductService
@inject IProductCategoryService ProductCategoryService
@inject ILogger<Product> Logger
@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IStorageService StorageService

@if (product == null)
{
    <div class="spinner-border text-info" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <div class="container-fluid">
        @if (!string.IsNullOrWhiteSpace(Message))
        {
            <div class="alert alert-warning" role="alert">
                @Message
            </div>
        }
        <div class="card m-auto">
            <h4 class="card-header">@product.Name</h4>
            <div class="row">
                <div class="col  m-md-auto">
                    <div class="card-body">
                        <img class="card-img img-fluid img-thumbnail" src="@product.ImageURL" alt="@product.Name"/>
                    </div>
                </div>
                <div class="col">
                    <div class="card-body">
                        <p class="card-text">@product.Description</p>
                        <div class="container-fluid">
                            <EditForm Model="product" OnSubmit="UpdateProduct" class="form" FormName="product">
                                <div class="row mb-auto">
                                    <div class="input-group">
                                        <div class="col">
                                            <div class="input-group-text">Name</div>
                                        </div>
                                        <div class="col">
                                            @if (EditMode == true)
                                            {
                                                <InputText type="text" class="form-control" @bind-Value="@product.Name"/>
                                            }
                                            else
                                            {
                                                <span class="form-control">@product.Name</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                                <div class="row mb-auto">
                                    <div class="input-group">
                                        <div class="col">
                                            <div class="input-group-text">Price</div>
                                        </div>
                                        <div class="col">
                                            @if (EditMode == true)
                                            {
                                                <InputNumber type="decimal" class="form-control" @bind-Value="product.Price"/>
                                            }
                                            else
                                            {
                                                <span class="form-control">@product.Price.ToString("C")</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                                <div class="row mb-auto">
                                    <div class="input-group">
                                        <div class="col">
                                            <div class="input-group-text">Quantity</div>
                                        </div>
                                        <div class="col">
                                            @if (EditMode == true)
                                            {
                                                <InputNumber type="number" class="form-control" @bind-Value="product.Quantity"/>
                                            }
                                            else
                                            {
                                                <span class="form-control">@product.Quantity</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                                <div class="row mb-auto">
                                    <div class="input-group">
                                        <div class="col">
                                            <div class="input-group-text">Category</div>
                                        </div>
                                        <div class="col">
                                            @if (EditMode == true)
                                            {
                                                <InputSelect class="form-control" @bind-Value="product.CategoryId">
                                                    @foreach (var category in productCategories)
                                                    {
                                                        <option value="@category.Id">@category.Name</option>
                                                    }
                                                </InputSelect>
                                            }
                                            else
                                            {
                                                <span class="form-control">@product.CategoryName</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                                @if (EditMode == true)
                                {
                                    <button class="btn btn-success mt-3" @onclick="UpdateProduct">Save Changes</button>
                                }
                            </EditForm>
                        </div>
                    </div>
                    <div class="card-body">
                        <form>
                            <div class="mb-3">
                                <label for="quantity" class="form-label h5">Quantity</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" id="quantity" min="1" max="@product.Quantity" value="1">
                                    <button type="submit" class="btn btn-primary">Add to Cart</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <AuthorizeView Roles="Admin, Staff">
                <div class="card-footer">
                    <h5 class="card-title text-danger">Administrative actions</h5>
                    <div class="container">
                        <button class="btn btn-primary" @onclick="() => EditMode = true">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteProduct()">Delete</button>
                    </div>
                </div>
            </AuthorizeView>
        </div>
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }

    [SupplyParameterFromForm]
    public ProductDto product { get; set; }

    [Parameter]
    public IEnumerable<ProductCategoryDto> productCategories { get; set; }

    [SupplyParameterFromQuery]
    private bool? EditMode { get; set; } = false;

    [SupplyParameterFromQuery]
    private bool? AddMode { get; set; } = false;

    private string? Message { get; set; }

    [CascadingParameter]
    private AuthenticationState? AuthenticationState { get; set; }


    // Add Authorization restriction to this method
    [Authorize(Roles = "Admin, Staff")]
    private async void DeleteProduct()
    {
        // Pre-authorize the user before deleting the product
        var authorizationResult = await AuthorizationService.AuthorizeAsync(AuthenticationState.User, "AdminOrStaff");
        if (!authorizationResult.Succeeded)
        {
            // The user is not authorized to delete products
            Message = "You are not authorized to delete products.";
            Logger.LogWarning("User is not authorized to delete products.");
            // Log Details of the user
            Logger.LogDebug("User Details: {user}", AuthenticationState.User);
            return;
        }

        // Log the pre-action state of the product object
        Logger.LogDebug("Product to delete: {product}", product);

        // Call the service to delete the product
        try
        {
            var result = await ProductService.DeleteProduct(product.Id);
            // If the result is true, the product was deleted successfully
            if (result)
            {
                Message = "Product deleted successfully";
                Logger.LogInformation($"Product deletion result: {result}");

                // Trigger a UI refresh to update the message
                await InvokeAsync(() => StateHasChanged());

                // Wait for a duration before redirecting
                await Task.Delay(TimeSpan.FromSeconds(3));
                NavigationManager.NavigateTo("/products");
            }
            else
            {
                Message = "Product deletion failed";
                Logger.LogError($"Product deletion failed: {result}");
            }
        }
        catch (Exception ex)
        {
            // Log the exception and set the message
            Logger.LogCritical(ex, $"Product delete failed: {ex.Message}");
            Message = $"Product delete failed: {ex.Message}";
        }
    }

    // Add Authorization restriction to this method
    [Authorize(Roles = "Admin, Staff")]
    private async void UpdateProduct()
    {
        // Pre-authorize the user before updating the product
        var authorizationResult = await AuthorizationService.AuthorizeAsync(AuthenticationState.User, "AdminOrStaff");
        if (!authorizationResult.Succeeded)
        {
            // The user is not authorized to update products
            Message = "You are not authorized to update products.";
            Logger.LogWarning("User is not authorized to update products.");
            // Log Details of the user
            Logger.LogDebug("User Details: {user}", AuthenticationState.User);
            return;
        }

        // Log all properties of the product object
        Logger.LogInformation("Product submitted: {product}", product);

        // Debug Log each property of the product object
        foreach (var property in product.GetType().GetProperties())
        {
            Logger.LogDebug("{property}: {value}", property.Name, property.GetValue(product));
        }

        // Call the service to update the product
        try
        {
            var result = await ProductService.UpdateProduct(product);
            // If the result is not null, the product was updated successfully
            if (result != null)
            {
                Message = "Product updated successfully";
                product = result;// Update the product with the returned result
            }
            else
            {
                Message = "Product update failed";
            }
        }
        catch (Exception ex)
        {
            // Log the exception and set the message
            Logger.LogError(ex, $"Product update failed: {ex.Message}");
            Message = $"Product update failed: {ex.Message}";
        }

        // Set the EditMode to false
        EditMode = false;
        await InvokeAsync(() => StateHasChanged());
    }

    /*[Authorize(Roles = "Admin, Staff")]
    public async void AddProduct()
    {
        var authorizationResult = await AuthorizationService.AuthorizeAsync(AuthenticationState.User, "AdminOrStaff");
        if (!authorizationResult.Succeeded)
        {
            Message = "You are not authorized to add products.";
            Logger.LogWarning("User is not authorized to add products.");
            Logger.LogDebug("User Details: {user}", AuthenticationState.User);
            return;
        }

        try
        {
            var result = await ProductService.AddProduct(product);
            if (result != null)
            {
                Message = "Product added successfully";
                product = result;
            }
            else
            {
                Message = "Product add failed";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Product add failed: {ex.Message}");
            Message = $"Product add failed: {ex.Message}";
        }
    }*/

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

    }

    protected override async Task OnParametersSetAsync()
    {
        // Pre-authorize the user before updating the product
        var authorizationResult = await AuthorizationService.AuthorizeAsync(AuthenticationState.User, "AdminOrStaff");
        if (!authorizationResult.Succeeded)
        {
            AddMode = false;
            EditMode = false;
        }


        if (AddMode == true)
        {
            product = new ProductDto();
            productCategories = await ProductCategoryService.GetProductCategories();
            product.CategoryId = productCategories.First().Id;

            EditMode = true;
        }
        else
        {
            try
            {
                product = await ProductService.GetProduct(int.Parse(Id));
                productCategories = await ProductCategoryService.GetProductCategories();
                
                // If in EditMode and product.CategoryId is not valid, select the first category
                if (EditMode == true && product.CategoryId == 0 && productCategories.Any())
                {
                    product.CategoryId = productCategories.First().Id;
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Unable to fetch product details");
                // Redirect to the /products page
                NavigationManager.NavigateTo("/products");
            }
        }
    }
}